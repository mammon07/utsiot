#include <WiFi.h>
#include <PubSubClient.h>
#include <DHT.h>

// Konfigurasi WiFi dan MQTT
const char* ssid = "utsihza"; 
const char* password = "152022261";   
const char* mqtt_server = "192.168.1.100"; 
WiFiClient espClient;
PubSubClient client(espClient);

// Konfigurasi DHT dan PIN
#define DHTPIN 8           
#define DHTTYPE DHT11     
DHT dht(DHTPIN, DHTTYPE);

const int ledMerah = 12;
const int ledKuning = 10;
const int ledHijau = 5;
const int relayPompa = 7;
const int buzzer = 9;
const int phPin = A0;  

// Variabel untuk status pompa
bool pompaStatus = false;

// Fungsi koneksi ke WiFi
void setup_wifi() {
  delay(10);
  Serial.println();
  Serial.print("Menghubungkan ke ");
  Serial.println(ssid);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("Terhubung ke WiFi");
}

// Callback MQTT untuk menerima pesan
void callback(char* topic, byte* message, unsigned int length) {
  String msg;
  for (int i = 0; i < length; i++) {
    msg += (char)message[i];
  }
  
  Serial.print("Pesan dari topik: ");
  Serial.print(topic);
  Serial.print(" - Pesan: ");
  Serial.println(msg);
  
  // Mengontrol pompa berdasarkan perintah dari aplikasi melalui MQTT
  if (String(topic) == "/hidroponik/pompa") {
    if (msg == "ON") {
      digitalWrite(relayPompa, HIGH); // Nyalakan pompa
      pompaStatus = true;             // Perbarui status pompa
      Serial.println("Pompa Dinyalakan dari Aplikasi");
    } else if (msg == "OFF") {
      digitalWrite(relayPompa, LOW);  // Matikan pompa
      pompaStatus = false;            // Perbarui status pompa
      Serial.println("Pompa Dimatikan dari Aplikasi");
    }
  }
}

void reconnect() {
  while (!client.connected()) {
    Serial.print("Menyambung ke MQTT...");
    if (client.connect("ESP32Client")) {
      Serial.println("terhubung");
      // Berlangganan ke topik kontrol pompa
      client.subscribe("/hidroponik/pompa");
    } else {
      Serial.print("gagal, rc=");
      Serial.print(client.state());
      delay(2000);
    }
  }
}

void setup() {
  Serial.begin(115200);
  setup_wifi();
  client.setServer(mqtt_server, 1883);
  client.setCallback(callback);

  dht.begin();
  pinMode(ledMerah, OUTPUT);
  pinMode(ledKuning, OUTPUT);
  pinMode(ledHijau, OUTPUT);
  pinMode(relayPompa, OUTPUT);
  pinMode(buzzer, OUTPUT);
}

void loop() {
  if (!client.connected()) {
    reconnect();
  }
  client.loop();

  // Membaca data dari sensor suhu dan kelembapan
  float suhu = dht.readTemperature();
  float kelembapan = dht.readHumidity();

  // Validasi data sensor suhu dan kelembapan
  if (isnan(suhu) || isnan(kelembapan)) {
    Serial.println("Gagal membaca dari sensor DHT!");
    return;
  }

  // Membaca data dari sensor pH
  int phValueRaw = analogRead(phPin); // Baca nilai analog dari sensor pH
  float phValue = (phValueRaw * 5.0 / 1024.0) * 3.5; // Konversi ke nilai pH karena analog

  // Kondisi lampu LED dan buzzer berdasarkan suhu
  if (suhu > 35) {
    digitalWrite(ledMerah, HIGH);
    digitalWrite(buzzer, HIGH);
    digitalWrite(ledKuning, LOW);
  } else if (suhu < 30) {
    digitalWrite(ledMerah, LOW);
    digitalWrite(buzzer, LOW);
    digitalWrite(ledKuning, HIGH);
  } else {
    digitalWrite(ledMerah, LOW);
    digitalWrite(buzzer, LOW);
    digitalWrite(ledKuning, LOW);
    digitalWrite(ledHijau, HIGH);
  }

  // Kirim data suhu, kelembapan, dan pH ke MQTT
  char suhuStr[8];
  char kelembapanStr[8];
  char phStr[8];
  dtostrf(suhu, 1, 2, suhuStr);
  dtostrf(kelembapan, 1, 2, kelembapanStr);
  dtostrf(phValue, 1, 2, phStr);
  client.publish("/hidroponik/suhu", suhuStr);
  client.publish("/hidroponik/kelembapan", kelembapanStr);
  client.publish("/hidroponik/ph", phStr);

  // Kirim status pompa ke MQTT
  if (pompaStatus) {
    client.publish("/hidroponik/pompaStatus", "ON");
  } else {
    client.publish("/hidroponik/pompaStatus", "OFF");
  }

  // Cetak nilai
  Serial.print("Suhu: ");
  Serial.print(suhu);
  Serial.print(" Â°C, Kelembapan: ");
  Serial.print(kelembapan);
  Serial.print(" %, pH: ");
  Serial.print(phValue);
  Serial.print(", Status Pompa: ");
  Serial.println(pompaStatus ? "ON" : "OFF");

  delay(2000); // Delay
}
